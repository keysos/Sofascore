# Campeonato Brasileiro de Futebol ‚öΩ

Integrantes: Jos√© Gustavo Abreu Alves e Anderson Soares de Santana Junior

https://github.com/keysos/Sofascore.git

Este projeto √© uma aplica√ß√£o em Java Swing e Python para gerenciamento e visualiza√ß√£o de estat√≠sticas de campeonatos de futebol.  
Ele permite carregar arquivos CSV contendo os resultados das partidas, gerar classifica√ß√µes automaticamente e visualizar gr√°ficos interativos sobre o desempenho dos times.

Descri√ß√£o do Trabalho:

O trabalho consistiu em desenvolver uma aplica√ß√£o com interface gr√°fica para gerar diversos gr√°ficos sobre o campeonato de futebol brasileiro, implementada em Java e Python. Em Java, utilizamos Java Swing e recursos nativos para criar a interface e os gr√°ficos; em Python, usamos Tkinter. A aplica√ß√£o permite visualizar estat√≠sticas de equipes, desempenho de um time e sua evolu√ß√£o no campeonato, oferecendo intera√ß√£o simples e intuitiva para o usu√°rio.

Na vers√£o em Java, foram desenvolvidos:

Tabela de classifica√ß√£o;
Gr√°fico de pizza mostrando vit√≥rias, derrotas e empates de um time selecionado;
Gr√°fico de barras com os gols;
Funcionalidade de busca por resultados a partir de rodadas;
Gr√°fico de linha demonstrando o desempenho de um time ao longo do campeonato.

Na vers√£o em Python, foram desenvolvidos:

Tabela de classifica√ß√£o;
Gr√°fico de pizza mostrando vit√≥rias, derrotas e empates de um time selecionado;
Gr√°fico de barras com os gols;
Funcionalidade de navega√ß√£o por rodadas;

Descri√ß√£o da implementa√ß√£o POO do projeto na segunda linguagem:

No c√≥digo, a orienta√ß√£o a objetos foi implementada de forma clara e funcional, usando classes para representar entidades do campeonato.

Classe Time

Representa cada time do campeonato como um objet
Cada inst√¢ncia armazena atributos pr√≥prios, como:

nome, id_time, pontos, jogos, vitorias, empates, derrotas, gols_pro, gols_contra.

M√©todos associados a cada time:

registrar_partida(): atualiza estat√≠sticas ap√≥s cada jogo.
Propriedades (saldo_gols e aproveitamento) calculam informa√ß√µes derivadas dinamicamente.

Benef√≠cio: cada time mant√©m seus dados de forma encapsulada, facilitando c√°lculos e exibi√ß√µes.

Classe CampeonatoBrasileiro

Representa o campeonato como um todo.
Cont√©m todos os times (times) e as rodadas (rodadas).

M√©todos importantes:

carregar_dados(): l√™ os jogos de um CSV e atualiza cada time.
classificacao(): retorna a lista de times ordenada pelos crit√©rios de pontua√ß√£o.
gols_na_rodada(): calcula gols totais em uma rodada.

Benef√≠cio: centraliza o gerenciamento do campeonato, separando l√≥gica de neg√≥cio da interface.

Classe CampeonatoGUI

Respons√°vel pela interface gr√°fica usando Tkinter.
Instancia um objeto CampeonatoBrasileiro e interage com seus m√©todos para
Mostrar a tabela de classifica√ß√£o.
Mostrar gr√°ficos de pizza e barras.
Navegar entre rodadas.

Cada funcionalidade do GUI est√° organizada em m√©todos, mantendo a l√≥gica do GUI separada da l√≥gica do campeonato.

## üìå Funcionalidades

Em java e python.

- **Carregar Arquivo CSV**  
  - O usu√°rio pode importar um arquivo CSV com os resultados das partidas.  
  - O sistema processa os dados e atualiza a tabela de classifica√ß√£o.

- **Tabela de Classifica√ß√£o estilo Brasileir√£o**  
  - Mostra posi√ß√£o, pontos, vit√≥rias, empates, derrotas, gols pr√≥, gols contra e saldo de gols.  
  - Ordena√ß√£o autom√°tica conforme regras tradicionais de classifica√ß√£o.

- **Visualiza√ß√µes Gr√°ficas**  
  - **Gr√°fico de Barras**: mostra gols marcados por cada time.  
  - **Gr√°fico de Pizza**: vit√≥rias, empates e derrotas de um time selecionado.  
  - **Jogos por Rodada**: exibe os resultados de uma rodada espec√≠fica.  
  - **Apenas em java: Gr√°fico de Linha**: evolu√ß√£o de desempenho de um time ao longo do campeonato.

- **Interface Amig√°vel (Java Swing e Tkinter)**  
  - Bot√µes para f√°cil acesso √†s fun√ß√µes.  
  - Janelas adicionais para exibi√ß√£o dos gr√°ficos e resultados.

---

## Estrutura Esperada do CSV

O arquivo CSV deve conter os seguintes campos (com cabe√ßalho na primeira linha):

Rodada,Data,IdCasa,NomeCasa,GolsCasa,IdFora,NomeFora,GolsFora
1,2024-05-01,1,Time A,2,2,Time B,1
1,2024-05-02,3,Time C,0,4,Time D,0

- **Rodada**: n√∫mero da rodada (inteiro)  
- **Data**: data do jogo (string)  
- **IdCasa / IdFora**: identificadores dos times  
- **NomeCasa / NomeFora**: nomes dos times  
- **GolsCasa / GolsFora**: placar da partida  

---

## üöÄ Como Executar

Em java:

1. Clone o reposit√≥rio:

   git clone https://github.com/seu-usuario/Sofascore.git

2. Abra o projeto em uma IDE compat√≠vel (NetBeans, IntelliJ ou Eclipse).

3. Compile e execute a classe principal:

- **src/main/CampeonatoUI.java

4. Clique em "Adicionar Arquivo" e selecione o CSV com os resultados.

Em python:

1. Clone o reposit√≥rio:

   git clone https://github.com/seu-usuario/Sofascore.git

2. Abra o projeto em uma IDE compat√≠vel (Vscode ou IntelliJ).

3. Deixar o arquivo do campeonato no mesmo diret√≥rio que a classe principal j√° importa o campeonato automaticamente.

4. Compile e execute a classe principal:

- **Python Project/main.py

5. Caso o arquivo n√£o esteja no mesmo diret√≥rio, clice no bot√£o importar e o selecione no gerenciador de arquivos.


