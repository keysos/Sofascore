/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Zezé
 */
public class CampeonatoUI extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(CampeonatoUI.class.getName());
    private Campeonato campeonato;

    /**
     * Creates new form CampeonatoUI
     */
    public CampeonatoUI() {
        initComponents();
        campeonato = new Campeonato();
        tableTeams.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        java.awt.Image icon = null;
        try {
            icon = ImageIO.read(getClass().getResource("/resources/logo.png"));
        } catch (IOException ex) {
            System.getLogger(CampeonatoUI.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }
        setIconImage(icon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    public static Image getAppIcon() {
        try {
            return ImageIO.read(CampeonatoUI.class.getResource("/resources/logo.png"));
        } catch (IOException e) {
            return null;
        }
    }

    private void mostrarResultadosRodada(int rodada) {
        // Filtra os jogos da rodada
        java.util.List<Jogo> jogosDaRodada = campeonato.getJogos().stream()
                .filter(j -> j.getRodada() == rodada)
                .collect(java.util.stream.Collectors.toList());

        // Cria a nova janela
        JFrame frame = new JFrame("Resultados da Rodada " + rodada);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(400, 300);

        // Painel com os resultados
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        for (Jogo j : jogosDaRodada) {
            JLabel label = new JLabel(j.getNomeCasa() + " " + j.getGolsCasa() + " x "
                    + j.getGolsFora() + " " + j.getNomeFora());
            panel.add(label);
        }

        frame.add(panel);
        frame.setVisible(true);
        frame.setIconImage(CampeonatoUI.getAppIcon());
    }

    private void showGoalsBarChart() {
        Map<String, Integer> goalsMap = new HashMap<>();
        for (Time t : campeonato.getTimes()) {
            goalsMap.put(t.getNome(), t.getGolsPro());
        }

        JFrame frame = new JFrame("Goals Bar Chart");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.add(new BarChartPanel(goalsMap));

        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        frame.setVisible(true);
        frame.setIconImage(CampeonatoUI.getAppIcon());

    }

    private void atualizarTabela(Campeonato campeonato) {
        DefaultTableModel model = (DefaultTableModel) tableTeams.getModel();
        model.setRowCount(0); // limpa linhas antigas
        model.setColumnCount(0); // limpa colunas antigas

        // Colunas como Brasileirão
        String[] colunas = {"Posição", "Nome", "P", "V", "E", "D", "GP", "GC", "SG"};
        for (String col : colunas) {
            model.addColumn(col);
        }

        // Ordena os times por pontos (desc), saldo de gols (desc), gols pró (desc), nome (asc)
        java.util.List<Time> timesOrdenados = new java.util.ArrayList<>(campeonato.getTimes());
        timesOrdenados.sort((t1, t2) -> {
            int cmp = Integer.compare(t2.GetPontos(), t1.GetPontos()); // pontos
            if (cmp != 0) {
                return cmp;
            }
            cmp = Integer.compare(t2.GetSaldoGols(), t1.GetSaldoGols()); // saldo de gols
            if (cmp != 0) {
                return cmp;
            }
            cmp = Integer.compare(t2.getGolsPro(), t1.getGolsPro()); // gols pró
            if (cmp != 0) {
                return cmp;
            }
            return t1.getNome().compareToIgnoreCase(t2.getNome()); // nome
        });

        int posicao = 1;
        for (Time t : timesOrdenados) {
            Object[] row = {
                posicao++,
                t.getNome(),
                t.GetPontos(),
                t.getVitorias(),
                t.getEmpates(),
                t.getDerrotas(),
                t.getGolsPro(),
                t.getGolsCon(),
                t.GetSaldoGols()
            };
            model.addRow(row);
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLoad = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTeams = new javax.swing.JTable();
        btnBarChart = new javax.swing.JButton();
        btnPieChart = new javax.swing.JButton();
        btnGamesPerRound = new javax.swing.JButton();
        btnLineChart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Brasileirão 2025");

        btnLoad.setText("Adicionar Arquivo");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        tableTeams.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Posição", "Nome", "P", "V", "E", "D", "GP", "GC", "SG"
            }
        ));
        jScrollPane1.setViewportView(tableTeams);

        btnBarChart.setText("Gráfico de Gols");
        btnBarChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBarChartActionPerformed(evt);
            }
        });

        btnPieChart.setText("Gráfico de Vítorias de um Time");
        btnPieChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPieChartActionPerformed(evt);
            }
        });

        btnGamesPerRound.setText("Jogos Por Rodada");
        btnGamesPerRound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGamesPerRoundActionPerformed(evt);
            }
        });

        btnLineChart.setText("Gráfico de Progressão");
        btnLineChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLineChartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLoad)
                        .addGap(18, 18, 18)
                        .addComponent(btnBarChart)
                        .addGap(18, 18, 18)
                        .addComponent(btnPieChart)
                        .addGap(18, 18, 18)
                        .addComponent(btnGamesPerRound)
                        .addGap(27, 27, 27)
                        .addComponent(btnLineChart)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 834, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoad)
                    .addComponent(btnBarChart)
                    .addComponent(btnPieChart)
                    .addComponent(btnGamesPerRound)
                    .addComponent(btnLineChart))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int option = fileChooser.showOpenDialog(this);

        if (option == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (Scanner scanner = new Scanner(file)) {
                boolean primeiraLinha = true;

                while (scanner.hasNextLine()) {
                    String linha = scanner.nextLine();

                    if (primeiraLinha) {
                        primeiraLinha = false; // pula cabeçalho
                        continue;
                    }

                    String[] dados = linha.split(",");

                    int rodada = Integer.parseInt(dados[0]);
                    String data = dados[1];
                    String idCasa = dados[2];
                    String nomeCasa = dados[3];
                    int golsCasa = Integer.parseInt(dados[4]);
                    String idFora = dados[5];
                    String nomeFora = dados[6];
                    int golsFora = Integer.parseInt(dados[7]);

                    // encontra ou cria os times
                    Time timeCasa = campeonato.getTimes().stream()
                            .filter(t -> t.getNome().equalsIgnoreCase(nomeCasa))
                            .findFirst()
                            .orElseGet(() -> {
                                Time t = new Time(nomeCasa);
                                try {
                                    campeonato.adicionarTime(t);
                                } catch (Exception e) {
                                }
                                return t;
                            });

                    Time timeFora = campeonato.getTimes().stream()
                            .filter(t -> t.getNome().equalsIgnoreCase(nomeFora))
                            .findFirst()
                            .orElseGet(() -> {
                                Time t = new Time(nomeFora);
                                try {
                                    campeonato.adicionarTime(t);
                                } catch (Exception e) {
                                }
                                return t;
                            });

                    // registra o resultado do jogo
                    timeCasa.registrarJogo(golsCasa, golsFora);
                    timeFora.registrarJogo(golsFora, golsCasa);

                    // cria o Jogo usando o construtor atual (Strings)
                    Jogo jogo = new Jogo(data, golsCasa, golsFora, idCasa, idFora, rodada, nomeCasa, nomeFora);
                    campeonato.adicionarJogo(jogo);
                }

                // atualiza a tabela de classificação
                atualizarTabela(campeonato);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Erro ao ler o CSV: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnBarChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBarChartActionPerformed
        // TODO add your handling code here:
        showGoalsBarChart();
    }//GEN-LAST:event_btnBarChartActionPerformed

    private void btnPieChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPieChartActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableTeams.getSelectedRow();
        if (selectedRow >= 0) {
            int wins = (int) tableTeams.getValueAt(selectedRow, 3);
            int draws = (int) tableTeams.getValueAt(selectedRow, 4);
            int losses = (int) tableTeams.getValueAt(selectedRow, 5);

            JFrame frame = new JFrame("Pie Chart");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.add(new PieChartPanel(wins, draws, losses));
            frame.pack();
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
            frame.setIconImage(CampeonatoUI.getAppIcon());
        } else {
            JOptionPane.showMessageDialog(this, "Select a team first.");
        }
    }//GEN-LAST:event_btnPieChartActionPerformed

    private void btnGamesPerRoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGamesPerRoundActionPerformed
        // TODO add your handling code here:
        String input = JOptionPane.showInputDialog("Digite o número da rodada:");
        if (input != null) {
            try {
                int rodada = Integer.parseInt(input);
                mostrarResultadosRodada(rodada);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Número inválido!");
            }
        }
    }//GEN-LAST:event_btnGamesPerRoundActionPerformed

    private void btnLineChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLineChartActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableTeams.getSelectedRow();
        if (selectedRow >= 0) {
            // Pega o nome do time da tabela
            String nomeTime = (String) tableTeams.getValueAt(selectedRow, 1);

            // Busca o objeto Time no campeonato
            Time timeSelecionado = campeonato.getTimes().stream()
                    .filter(t -> t.getNome().equals(nomeTime))
                    .findFirst()
                    .orElse(null);

            if (timeSelecionado != null) {
                // Cria a janela do gráfico
                JFrame frame = new JFrame("Line Chart - " + nomeTime);
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                frame.setIconImage(CampeonatoUI.getAppIcon());

                // Cria o painel do gráfico passando o time selecionado
                frame.add(new LineChartPanel(timeSelecionado));

                frame.pack();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select a team first.");
        }
    }//GEN-LAST:event_btnLineChartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new CampeonatoUI().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBarChart;
    private javax.swing.JButton btnGamesPerRound;
    private javax.swing.JButton btnLineChart;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnPieChart;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableTeams;
    // End of variables declaration//GEN-END:variables
}
