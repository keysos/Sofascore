/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;

import java.io.File;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import main.Campeonato;

/**
 *
 * @author Zezé
 */
public class CampeonatoUI extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(CampeonatoUI.class.getName());
    private Campeonato campeonato;

    /**
     * Creates new form CampeonatoUI
     */
    public CampeonatoUI() {
        initComponents();
        campeonato = new Campeonato();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void atualizarTabela(Campeonato campeonato) {
        DefaultTableModel model = (DefaultTableModel) tableTeams.getModel();
        model.setRowCount(0); // limpa linhas antigas
        model.setColumnCount(0); // limpa colunas antigas

        // Colunas como Brasileirão
        String[] colunas = {"ID", "Nome", "P", "V", "E", "D", "GP", "GC", "SG"};
        for (String col : colunas) {
            model.addColumn(col);
        }

        int id = 1;
        for (Time t : campeonato.getTimes()) {
            Object[] row = {
                id++,
                t.getNome(),
                t.GetPontos(),
                t.getVitorias(),
                t.getEmpates(),
                t.getDerrotas(),
                t.getGolsPro(),
                t.getGolsCon(),
                t.GetSaldoGols()
            };
            model.addRow(row);
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLoad = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTeams = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnLoad.setText("Adicionar Arquivo");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        tableTeams.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "P", "V", "E", "D", "GP", "GC", "SG"
            }
        ));
        jScrollPane1.setViewportView(tableTeams);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLoad)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(btnLoad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int option = fileChooser.showOpenDialog(this);

        if (option == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (Scanner scanner = new Scanner(file)) {
                boolean primeiraLinha = true;

                while (scanner.hasNextLine()) {
                    String linha = scanner.nextLine();

                    if (primeiraLinha) {
                        primeiraLinha = false; // pula cabeçalho
                        continue;
                    }

                    String[] dados = linha.split(",");

                    int rodada = Integer.parseInt(dados[0]);
                    String data = dados[1];
                    String idCasa = dados[2];
                    String nomeCasa = dados[3];
                    int golsCasa = Integer.parseInt(dados[4]);
                    String idFora = dados[5];
                    String nomeFora = dados[6];
                    int golsFora = Integer.parseInt(dados[7]);

                    // encontra ou cria os times
                    Time timeCasa = campeonato.getTimes().stream()
                            .filter(t -> t.getNome().equalsIgnoreCase(nomeCasa))
                            .findFirst()
                            .orElseGet(() -> {
                                Time t = new Time(nomeCasa);
                                try {
                                    campeonato.adicionarTime(t);
                                } catch (Exception e) {
                                }
                                return t;
                            });

                    Time timeFora = campeonato.getTimes().stream()
                            .filter(t -> t.getNome().equalsIgnoreCase(nomeFora))
                            .findFirst()
                            .orElseGet(() -> {
                                Time t = new Time(nomeFora);
                                try {
                                    campeonato.adicionarTime(t);
                                } catch (Exception e) {
                                }
                                return t;
                            });

                    // registra o resultado do jogo
                    timeCasa.registrarJogo(golsCasa, golsFora);
                    timeFora.registrarJogo(golsFora, golsCasa);

                    // cria o Jogo usando o construtor atual (Strings)
                    Jogo jogo = new Jogo(data, golsCasa, golsFora, idCasa, idFora, rodada, nomeCasa, nomeFora);
                    campeonato.adicionarJogo(jogo);
                }

                // atualiza a tabela de classificação
                atualizarTabela(campeonato);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Erro ao ler o CSV: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnLoadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new CampeonatoUI().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoad;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableTeams;
    // End of variables declaration//GEN-END:variables
}
